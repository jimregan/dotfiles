import scala.xml.XML
val f = XML.load("test.xml")
import 4~._ie.tcd.slscs.itut.AinmNerCorpus
import ie.tcd.slscs.itut.AinmNerCorpus._
TEIHeader.readParagraphs(f)
import scala.xml._
val f = <foo/>
f.name
f
f.namespace
f.toString
import ie.tcd.slscs.itut.AinmNerCorpus._
val f = XML.load("test.xml")
import scala.xml.XML
val f = XML.load("test.xml")
TEIHeader.readParagraphs(f)
import scala.xml.XML
val f = XML.load("test.xml")
import ie.tcd.slscs.itut.AinmNerCorpus._
TEIHeader.readParagraphs(f)
import ie.tcd.slscs.itut.AinmNerCorpus._
import scala.xml.XML
val f = XML.load("test.xml")
TEIHeader.readParagraphs(f)
import ie.tcd.slscs.itut.AinmNerCorpus._
import scala.xml.XML
val f = XML.load("test.xml")
TEIHeader.readParagraphs(f)
val paras = TEIHeader.readParagraphs(f)
val para = paras(0)
para.getText
import ie.tcd.slscs.itut.gramadanj.FileUtils
val foo = FileUtils.isDirectory("/home/jim/www.ainm.ie")
val files = FileUtils.getFileListStartsWith("/home/jim/www.ainm.ie", "Bio")
files.toList
import scala.xml.XML
XML.loadFile(files(0))
import ie.tcd.slscs.itut.AinmNerCorpus
import ie.tcd.slscs.itut.AinmNerCorpus.TEIReader
AinmNerCorpus
val fo = EduInst("foo", "TCD", "")
val fo = AinmNerCorpus.EduInst("foo", "TCD", "")
import ie.tcd.slscs.itut.AinmNerCorpus.*
import ie.tcd.slscs.itut.AinmNerCorpus._
val fo = EduInst("foo", "TCD", "")
  def filterNERType(kind: String, l: List[NERText]): List[NERText] = {
    def filterinner(n: NERText, kind: String): NERText = n match {
      case EntityReference(t, k) = {
        if(k == kind) {
          EntityReference(t, k)
        } else {
          TextPart(t)
        }
      }
      case TextPart(t) => TextPart(t)
    }
    l.map{e => filterinner(e, kind)}
  }
import ie.tcd.slscs.itut.AinmNerCorpus._
import ie.tcd.slscs.itut.AinmNerCorpus.AinmProcess
AinmProcess.getFileList("/home/jim/www.ainm.ie")
import ie.tcd.slscs.itut.AinmNerCorpus.AinmProcess
AinmProcess.getFileList("/home/jim/www.ainm.ie")
val files = AinmProcess.getFileList("/home/jim/www.ainm.ie")
val docs = files.map{readFile}
val docs = files.map{AinmProcess.readFile}
import ie.tcd.slscs.itut.AinmNerCorpus.AinmProcess
AinmProcess.getFileList("/home/jim/www.ainm.ie")
val files = AinmProcess.getFileList("/home/jim/www.ainm.ie")
val docs = files.map{AinmProcess.readFile}
import ie.tcd.slscs.itut.AinmNerCorpus.AinmProcess
AinmProcess.getFileList("/home/jim/www.ainm.ie")
val files = AinmProcess.getFileList("/home/jim/www.ainm.ie")
val docs = files.map{AinmProcess.readFile}
import ie.tcd.slscs.itut.AinmNerCorpus.AinmProcess
AinmProcess.getFileList("/home/jim/www.ainm.ie")
val files = AinmProcess.getFileList("/home/jim/www.ainm.ie")
val docs = files.map{AinmProcess.readFile}
import ie.tcd.slscs.itut.AinmNerCorpus.AinmProcess
AinmProcess.getFileList("/home/jim/www.ainm.ie")
val files = AinmProcess.getFileList("/home/jim/www.ainm.ie")
val docs = files.map{AinmProcess.readFile}
import ie.tcd.slscs.itut.AinmNerCorpus.AinmProcess
AinmProcess.getFileList("/home/jim/www.ainm.ie")
val files = AinmProcess.getFileList("/home/jim/www.ainm.ie")
val docs = files.map{AinmProcess.readFile}
import ie.tcd.slscs.itut.AinmNerCorpus.AinmProcess
AinmProcess.getFileList("/home/jim/www.ainm.ie")
val files = AinmProcess.getFileList("/home/jim/www.ainm.ie")
val docs = files.map{AinmProcess.readFile}
val doc1 = docs(0)
AinmProcess.sentdetect.sentPosDetect("Chuir se e. Agus anois.")
val f = AinmProcess.sentdetect.sentPosDetect("Chuir se e. Agus anois.")
def splitParagraph(p: Paragraph): Array[Span] = AinmProcess.sentdetect.sentPosDetect(p.getText)
import  ie.tcd.slscs.itut.AinmNerCorpus.AinmReader
import  ie.tcd.slscs.itut.AinmNerCorpus._
def splitParagraph(p: Paragraph): Array[Span] = AinmProcess.sentdetect.sentPosDetect(p.getText)
import opennlp.tools.util.Span
def splitParagraph(p: Paragraph): Array[Span] = AinmProcess.sentdetect.sentPosDetect(p.getText)
  def splitParagraphs(l: List[Paragraphs]): List[Array[Span]] = l.map{splitParagraph}
  def splitParagraphs(l: List[Paragraph]): List[Array[Span]] = l.map{splitParagraph}
splitParagraphs(doc1)
val split = splitParagraphs(doc1)
val test = "thing to test"
test.replaceAll(" ", "_").toCharArray.sliding(2).toList
test.replaceAll(" ", "_").toCharArray.sliding(2).map{mkString}
test.replaceAll(" ", "_").toCharArray.sliding(2).map{_.mkString}
test.replaceAll(" ", "_").toCharArray.sliding(2).map{_.mkString}.toList
val s = Span(2, 3)
import opennlp.tools.util.Span
val s = Span(2, 3)
val s = new Span(2,3)
import  ie.tcd.slscs.itut.AinmNerCorpus._
import  ie.tcd.slscs.itut.AinmNerCorpus.AinmReader
