import scala.xml._
val e = <foo n="bar">blah</foo>
e.attribute("n")
e.attribute("blah")
e.attribute("blah") == None
e.attribute("blah") == "foo"
e.attribute("n") == "foo"
e.attribute("n") == "bar"
e.attribute("n") == Some("bar")
val nat = e.attribute("n")
nat.get
e.attribute("n").text == "bar"
e.attribute("n").get.text == "bar"
e.name
e.label
case class Thing(s: String, t: String)
val tl = List[Thing]
val tl = List.empty[Thing]
val tl = List(Thing("a","b"), Thing("b","c"))
tl.map{e => (e.s, e.t)}.toMap
val vars = List("a", "b")
val vars = Map("a" -> "b". "b" -> "c"_
val vars = Map("a" -> "b". "b" -> "c")
val vars = Map("a" -> "b", "b" -> "c")
val variables = collection.mutable.Map.empty ++ vars
variables("a")
variables("a") = "foo"
variables("a")
variables("d") = "bar"
variables("d")
val variables = collection.mutable.Map.empty ++ vars
val validvariables: List[String] = vars.map(_._1).toList
  def getVar(s: String): Option[String] = {
    if(validvariables.contains(s)) {
      variables.get(s)
    } else {
      None
    }
  }
variables("d") = "bar"
getVar("a")
getVar("d")
val a = "  "
val b = a * 3
val b = a * 3.length
val b = (a * 3).length
val ff = <b><c/></b>
val fg = (ff \ "c")
val fg = (ff \ "d")
fg.length
val fff = <action c="test">
      <call-macro n="firstWord">
        <with-param pos="1"/>
      </call-macro>
      <out>
        <chunk name="ant" case="caseFirstWord">
          <tags>
            <tag><lit-tag v="SN"/></tag>
            <tag><clip pos="2" side="sl" part="gen"/></tag>
            <tag><clip pos="2" side="tl" part="nbr"/></tag>
          </tags>
          <lu>
            <clip pos="2" side="tl" part="whole"/>
          </lu>
        </chunk>
      </out>
    </action>
fff.child
val tmp = "foo"
val tmper = "<{foo}>"
val tmper = "<{tmp}>"
val tmper = "<$tmp>"
val tmper = s"""<$tmp>"""
