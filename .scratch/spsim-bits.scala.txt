import scala.math._

object Stringology {

def swap[F,S](f: F, s: S): (S, F) = (s, f)

def llcp(s1: String, s2: String): Int = {
  var i = 0
  val j = if (s1.length < s2.length) s1.length else s2.length
  while (i < j) {
    if (s1(i) != s2(i)) 
      return i
    i += 1
  }
  i
}

def llcs(s1: String, s2: String): Int = {
  val s = if (s1.length < s2.length) (s2, s1) else (s1, s2)
  val l = Array.fill(s._2.length + 1) { 0 }

  for (i <- 0 until s._1.length) {
    var p = 0
    for (j <- 0 until s._2.length) {
      var t = if (s._1(i) == s._2(j)) 1 else 0
      var m = max(max(p+t, l(j)), l(j+1))
      p = l(j+1)
      l(j+1) = m
    }
  }
  l(s._2.length)
}

def lcsr(s1: String, s2: String): Double = llcs(s1, s2).toDouble / max(s1.length, s2.length)

def mismatches(s1: String, s2: String, context: Int = 0): (String, String) = {
  if (s1.length != s2.length) {
    throw new IllegalArgumentException("Parameter lengths not equal")
  }

  var lct, rct = context
  var i:Option[Int] = None
  var p:Option[Int] = None
  var q:Option[Int] = None

  for (j <- (0 until s1.length)) {
    if (s1(j) == s2(j)) {
      i match {
        case Some(idx) => {
          p = Some(max(0, idx-lct))
          q = Some(min(j+rct, s1.length))
        } 
        case None => 
      }
    } else if (!i.isInstanceOf[Int]) {
      i = Some(i.getOrElse(j))
    }
  }

  return (s1.substring(p.getOrElse(max(i.get-lct, 0)), q.getOrElse(s1.length)),
          s2.substring(p.getOrElse(max(i.get-lct, 0)), q.getOrElse(s2.length)))
}
def mismatches(s: (String, String)): (String, String) = mismatches(s._1, s._2)

private def min3(a: Int, b: Int, c: Int): Int = min(a, min(b, c))
private def max3(a: Int, b: Int, c: Int): Int = max(a, max(b, c))

def ed(s1: String, s2: String): Int = {
  val s = if (s1.length < s2.length) (s2, s1) else (s1, s2)
  val d = Array.fill(s._2.length + 1) { 0 }
  for (i <- (0 until s._1.length)) {
    var p = i
    d(0) = i+1
    for (j <- (0 until s._2.length)) {
      var t = if (s._1(i) == s._2(j)) 0 else 1
      var m = min(min(p+t, d(j)+1), d(j+1)+1)
      p = d(j+1)
      d(j+1) = m
    }
  }
  return d(s._2.length)
}

def ned(s1: String, s2: String): Double = ed(s1, s2).toDouble / max(1, max(s1.length, s2.length))

def edsim(s1: String, s2: String): Double = 1.0 - ned(s1, s2)

def align(s1: String, s2: String, gap: Char='_'): (String, String) = {
  val dist = Array.tabulate(s1.length+1, s2.length+1){ (i, j) => if (i==0) j else if (j==0) i else i }
  val row = Array.tabulate(dist(0).size){ i => dist(0)(i) }
  for (i <- (0 until s1.length)) { 
    var p = i
    row(0) = dist(i)(0)
    for (j <- (0 until s2.length)) {
      var t = if (s1(i) == s2(j)) 0 else 1
      var m = min(min(p+t, row(j)+1), row(j+1)+1)
      p = row(j+1)
      row(j+1) = m
      dist(i+1)(j+1) = m
    }
  }

  var s1_ = ""
  var s2_ = ""

  var i = s1.length
  var j = s2.length

  while (i != 0 && j != 0) {
    if (  (dist(i-1)(j-1) <= dist(i-1)(j) && dist(i-1)(j-1) <  dist(i)(j-1)) 
       || (dist(i-1)(j-1) <  dist(i-1)(j) && dist(i-1)(j-1) <= dist(i)(j-1))
       || (dist(i-1)(j-1) == dist(i-1)(j) && dist(i-1)(j-1) == dist(i)(j-1)) ) {
      s1_ = s1((if (i>0) i else s1.length)-1)+s1_
      s2_ = s2((if (j>0) j else s2.length)-1)+s2_
      i = i-1
      j = j-1
    } else if (  (dist(i-1)(j) <= dist(i-1)(j-1) && dist(i-1)(j) <  dist(i)(j-1))
              || (dist(i-1)(j) <  dist(i-1)(j-1) && dist(i-1)(j) <= dist(i)(j-1)) ) {
      s1_ = s1((if (i>0) i else s1.length)-1)+s1_
      s2_ = gap+s2_
      i = i-1
    } else {
      s1_ = gap+s1_
      s2_ = s2((if (j>0) j else s2.length)-1)+s2_
      j = j-1
    }
  }

  if (i != 0) {
    s1_ = s1.substring(0, i) + s1_
    s2_ = gap.toString * i + s2_
  } 
  if (j != 0) {
    s1_ = gap.toString * j + s1_
    s2_ = s2.substring(0, j) + s2_
  } 

  return (s1_, s2_)
}

def main(args: Array[String]) {
  println ("Hello")
  var s = align("char", "far")
  println (s._1)
  println (s._2)
  s = align("advantage", "vantagem")
  println (s._1)
  println (s._2)
}

}

