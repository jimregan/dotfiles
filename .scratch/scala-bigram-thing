

//def mapToOne(t: (Char, Char)):(Char, Char, Int) = (t._1, t._2, 1)
// Change newline to space, flatten multiple spaces
def normalise(s: String) = s.replaceAll("\n", " ").replaceAll("  *", " ")

def stringToBigrams(s: String):List[(Char, Char)] = {
  val first = s.toList.slice(0, s.length-1)
  val second = s.toList.slice(1, s.length)
  first.zip(second)
}

def addOnes(l: List[(Char, Char)]) = {
  val ones = List.fill[Int](l.size)(1)
  l.zip(ones)
}


def addZeroes(l: List[(Char, Char)]) = {
  val ones = List.fill[Int](l.size)(0)
  l.zip(ones)
}

def stringify(a: (Char, Char)) = a._1.toString + a._2.toString


//crap
def reducer(a: (Char, Char, Int), b: (Char, Char, Int)):List[(Char, Char, Int)] = {
  if (a._1 == b._1 && a._2 == b._2)
    List((a._1, a._2, a._3 + b._3))
  else
    List(a, b)
}
