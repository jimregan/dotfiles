sealed trait Expr
// Number rule
case class Value(value: String) extends Expr


// NP(gen=2,num=2):adj(3) -> det nom adj det.dem | det.dem adj nom
//                        -> det1 nom adj det2 | det1 nom adj det2

// COG -> np.cog=head guio np.cog | np.cog=head guio np.cog


//adj =
//  adj.sint | adj.sint :: adj.sint.comp | adj.sint.comp
//                      :: adj.sint.sup | adj.sint.sup


// $num = num | num.*
// $nom = n | n.*
// NUM -> $num | $num



    val Number = rule { capture(Digits) ~> Value }

    val Digits = rule { oneOrMore(CharPredicate.Digit) }

//
https://github.com/sirthias/parboiled/blob/master/examples-scala/src/main/scala/org/parboiled/examples/json/JsonParser1.scala
// https://github.com/sirthias/parboiled/wiki/Simple-Calculator
//
http://www.hascode.com/2014/01/creating-grammar-parsers-in-java-and-scala-with-parboiled/
//
https://bitbucket.org/hascode/parboiled-grammar-tutorial/src/5f2edf9cd95eed57a70feb77f22c5b6c7659200c/scala-example/src/main/scala/com/hascode/parser/SingleLineDslParser.scala?at=master&fileviewer=file-view-default
// https://github.com/sirthias/parboiled2
//
https://github.com/sirthias/parboiled2#non-termination-when-using-syntactic-predicates
//
https://github.com/sirthias/parboiled2/blob/master/examples/src/main/scala/org/parboiled2/examples/Calculator2.scala

